defmod test_SD_WS_devices UnitTest dummyDuino ( 
{
	use Test2::V0;
	use Test2::Tools::Compare qw{is};
	use JSON; 
	## for online testsytem: defmod test_SDWS_devices UnitTest dummyDuino ##
	my $testDataArray; 
	
	CommandAttr(undef,"autocreate verbose 5");

	my $sensorname="SD_WS_38_T_1";
	subtest "Verify $sensorname - autocreate & readings" => sub {
		plan tests => 3;

		subtest 'autocreate' => sub {
			for my $i (1..2) {
				Dispatch($targetHash,"W38#8B922397E");
				ok(!IsDevice($sensorname), "check sensor not created with dispatch $i/3");
				sleep 3;
			}
			Dispatch($targetHash,"W38#8B922397E");
			ok(IsDevice($sensorname), "check sensor created with 3. dispatch");
			sleep 3;
			Dispatch($targetHash,"W38#8B922397E");
		};
		subtest 'Checking readings' => sub {
			plan tests => 4;
			is(ReadingsVal($sensorname,"temperature","0"),"4.7","check temperature reading");
			is(ReadingsVal($sensorname,"batteryState","0"),"ok","check battery reading");
			is(ReadingsVal($sensorname,"channel","0"),"1","check battery reading");
			is(ReadingsVal($sensorname,"beep","0"),"off","check beep reading");
		};
		
		CommandDelete(undef,$sensorname);
		CommandDelete(undef,"FileLog_".$sensorname);
		CommandDelete(undef,"SVG_".$sensorname);
	 	ok(!IsDevice($sensorname), "check sensor deleted correctly");
	};
	
	subtest "Verify sensorÂ´s from JSON" => sub {
		sub loadJson
		{
			my $jsonStr=GetFileFromURL($_[0],4,"",1,4);
			$testDataArray = eval { decode_json($jsonStr) };
			if($@){
				diag("open json file TestData was not possible $?"); 
				diag explain $jsonStr;
			}
		}

		my $jsonSourceUrl = AttrVal($name,"Test_Data_URI","https://raw.githubusercontent.com/RFD-FHEM/SIGNALduino_TOOL/master/FHEM/lib/SD_Device_ProtocolList.json");
		loadJson($jsonSourceUrl); 
    
    my $todo = undef;
    TestLabel:
		while ( (my $pID, my $testSet) = each  (@{$testDataArray}) )
		{
			next if (!defined($testSet->{module}) || $testSet->{module} ne "SD_WS");
			next if (!lib::SD_Protocols::exists($testSet->{id}));
			next if (lib::SD_Protocols::checkProperty($testSet->{id},'developId',undef));
	
			while ( (my $tID, my $tData) = each (@{$testSet->{data}}) ) 
			{
				#diag explain $tData;
			
				subtest "Checking module: $testSet->{module} device: $testSet->{name} TestNo: $tID " => sub {
				
					if (IsDevice($tData->{internals}{NAME}))
					{
						plan(2); # one for readings and one for internals
						note("device is already defined on system, clearing readings");
						while ( (my $rName, my $rValue) = each (%{$tData->{readings}}) )
						{
							CommandDeleteReading(undef, "$tData->{internals}{NAME} $rName");
						}
					}  else {
						plan(3); # one for readings and one for internals and one for defmod
						note("device will be defined temporary");
						is(CommandDefMod(undef,"-temporary $tData->{internals}{NAME} $testSet->{module} $tData->{internals}{DEF}"),U(),"Verify device defmod") || diag explain $tData;
					}
					no strict "refs"; 
					&{$modules{$testSet->{module}}{ParseFn}}($targetHash,$tData->{dmsg});
					use strict "refs"; 
					subtest "Verify readings" => sub {
						my $plan=0;
						while ( (my $rName, my $rValue) = each (%{$tData->{readings}}) )
						{
							$plan++;
							is(ReadingsVal($tData->{internals}{NAME} ,$rName,"0"),$rValue,"check reading $rName");
						}
						plan($plan);
					};

					subtest "Verify internals" => sub {
						my $plan=0;
						while ( (my $iName, my $iValue) = each (%{$tData->{internals}}) )
						{
						$plan++;
						is(InternalVal($tData->{internals}{NAME} ,$iName,"0"),$iValue,"check internal $iName");						
						}
						plan($plan);
					};
				
				}
			}
		}

		if ( !defined($todo) )
		{
			my $jsonSourceUrl = AttrVal($name,"Test_Data_URI","https://raw.githubusercontent.com/RFD-FHEM/SIGNALduino_TOOL/pre-release/FHEM/lib/SD_Device_ProtocolList.json");	
			loadJson($jsonSourceUrl); 
			$todo = todo "Testing against pre-release testdata, correct test before push this to master";
			goto TestLabel;
		}
	}
} 
)
