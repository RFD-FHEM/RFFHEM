defmod test_09_SD_WS09_devices UnitTest dummyDuino ( 
{
	use Test2::V0;
	use Test2::Tools::Compare qw{is};
	use Test2::Require::Module 'Digest::CRC'; # need for SD_WS09 modul - SD_WS09_CRCCHECK
	use Test2::Require::Module 'Math::Trig';	# need for SD_WS09 modul - SD_WS09_WindDirAverage
	use JSON;

	## for online testsytem: defmod test_SDWS09_devices UnitTest dummyDuino ##
	subtest "check requirements" => sub {
		plan(1);
		CommandAttr(undef,"global dupTimeout 0");
		is(AttrVal("global", "dupTimeout", undef),0,"dupTimeout is set to 0");
	};

	my $testDataArray;
	sub loadJson {
		my $jsonStr=GetFileFromURL($_[0],4,"",1,4);
		$testDataArray = eval { decode_json($jsonStr) };
		if($@){
			diag("open json file TestData was not possible $?");
			diag explain $jsonStr;
		}
	}

	my $jsonSourceUrl = AttrVal($name,"Test_Data_URI","https://raw.githubusercontent.com/RFD-FHEM/SIGNALduino_TOOL/master/FHEM/lib/SD_Device_ProtocolList.json");
	loadJson($jsonSourceUrl);

  my $todo = undef;
  TestLabel:
	while ( (my $pID, my $testSet) = each  (@{$testDataArray}) ) {
		next if (!defined($testSet->{module}) || $testSet->{module} ne "SD_WS09");
		next if (!$targetHash->{protocolObject}->protocolExists($testSet->{id}));
		next if ($targetHash->{protocolObject}->checkProperty($testSet->{id},'developId',undef));

		while ( (my $tID, my $tData) = each (@{$testSet->{data}}) ) {
			#diag explain $tData;

			subtest "Checking module: $testSet->{module} device: $testSet->{name} TestNo: $tID " => sub {

				if (IsDevice($tData->{internals}{NAME})) {
					plan(3); # one for readings and one for internals
					note("device is already defined on system, clearing readings");
					CommandDeleteReading(undef, "$tData->{internals}{NAME} .*");
				} else {
					plan(4); # one for readings and one for internals and one for defmod
					note("device will be defined temporary");
					is(CommandDefMod(undef,"-temporary $tData->{internals}{NAME} $testSet->{module} $tData->{internals}{DEF}"),U(),"Verify device defmod") || diag explain $tData;
				}

				### note ###
				## readings must all deleted, any DMSG create only some readings and not all
				## without delete, always all readings exists
				subtest "check deleted readings" => sub {
					my $cnt=0;
					while ( (my $rName, my $rValue) = each (%{$defs{$testSet->{name}}->{READINGS}}) ) {
						$cnt++;
					}
					plan(1);
					is($cnt,0,"all readings deleted");
				};

				no strict "refs";
				&{$modules{$testSet->{module}}{ParseFn}}($targetHash,$tData->{dmsg});		# Handover DMSG
				use strict "refs";

				subtest "Verify readings" => sub {
					my $plan=0;
					while ( (my $rName, my $rValue) = each (%{$tData->{readings}}) ) {
						$plan++;
						is(ReadingsVal($tData->{internals}{NAME} ,$rName,"0"),$rValue,"check reading $rName");
					}
					plan($plan);
				};

				subtest "Verify internals" => sub {
					my $plan=0;
					while ( (my $iName, my $iValue) = each (%{$tData->{internals}}) ) {
						$plan++;
						is(InternalVal($tData->{internals}{NAME} ,$iName,"0"),$iValue,"check internal $iName");
					}
					plan($plan);
				};
			}
		}
	}

	if ( !defined($todo) ) {
		my $jsonSourceUrl = AttrVal($name,"Test_Data_URI","https://raw.githubusercontent.com/RFD-FHEM/SIGNALduino_TOOL/pre-release/FHEM/lib/SD_Device_ProtocolList.json");
		loadJson($jsonSourceUrl);
		$todo = todo "Testing against pre-release testdata, correct test before push this to master";
		goto TestLabel;
	}
}
)
