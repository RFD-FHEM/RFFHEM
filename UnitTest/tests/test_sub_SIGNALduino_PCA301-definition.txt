defmod test_sub_SIGNALduino_PCA301 UnitTest dummyDuino ( 
{
	use Test2::V0;
	use Test2::Tools::Compare qw{is};
	
	# note: sub SIGNALduino_PCA301 use Digest::CRC

	subtest 'Test rcode 1 , checksum ok' => sub {
		plan(2);
		
		subtest 'Test sub PCA301 with RAWMSG one' => sub {
			note("MN;D=0405019E8700AAAAAAAA0F13AA16ACC0540AAA49C814473A2774D208AC0B0167;N=3;R=6;");

			plan(2);
			my $dmsg="0405019E8700AAAAAAAA0F13AA16ACC0540AAA49C814473A2774D208AC0B0167";
			my $id=101;
			my ($rcode,$dmsgMod) = SIGNALduino_PCA301($target,$dmsg,$id);

			is($rcode,1,"check rcode for PCA301 dmsg one");
			is($dmsgMod,"OK 24 4 5 1 158 135 0 170 170 170 170 0F13","check dmsgMod for PCA301 dmsg one");
		};
		
		subtest 'Test sub PCA301 with RAWMSG two' => sub {
			note("MN;D=010503B7A101AAAAAAAA7492AA9885E53246E91113F897A4F80D30C8DE602BDF;N=3;");

			plan(2);
			my $dmsg="010503B7A101AAAAAAAA7492AA9885E53246E91113F897A4F80D30C8DE602BDF ";
			my $id=101;
			my ($rcode,$dmsgMod) = SIGNALduino_PCA301($target,$dmsg,$id);

			is($rcode,1,"check rcode for PCA301 dmsg two");
			is($dmsgMod,"OK 24 1 5 3 183 161 1 170 170 170 170 7492","check dmsgMod for PCA301 dmsg two");
		};	
	};

	subtest 'Test rcode -1 , checksum wrong' => sub {
		note("MN;D=010503B7A101AAAAAAAA74000A9885E53246E91113F897A4F80D30C8DE602BDF;N=3;");
		note("wrong checksum from dmsg");

		plan(2);
		my $dmsg="010503B7A101AAAAAAAA74000A9885E53246E91113F897A4F80D30C8DE602BDF  ";
		my $id=101;
		my ($rcode,$dmsgMod) = SIGNALduino_PCA301($target,$dmsg,$id);

		is($rcode,-1,"check rcode for PCA301 wrong dmsg with wrong checksum");
		is($dmsgMod,"PCA301_convert: wrong checksum 7400","check dmsgMod for PCA301 wrong dmsg with wrong checksum");	
	};
	
	subtest 'Test rcode -1, length to short' => sub {
		plan(1);
		my $dmsg="010503B7A101AAAAAAAA";
		my $id=101;
		my ($rcode,$dmsgMod) = SIGNALduino_PCA301($target,$dmsg,$id);

		is($rcode,-2,'check rcode for PCA301 length to short');
	};
	
	subtest 'test ID100_2_Lacross' => sub 	{
			
			use lib::SD_Protocols;
			my $todo = todo('Subtest isn not finished');
			my $hexMsg="010503B7A101AAAAAAAA";
			eval {
				my $dmsgMod = lib::SD_Protocols::ID100_2_Lacross($hexMsg);	
			}
			#is($rcode,-2,'check rcode for PCA301 length to short');
			pass();
	}
	
	
}
)
