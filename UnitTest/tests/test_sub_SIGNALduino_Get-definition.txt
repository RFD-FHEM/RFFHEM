defmod test_sub_SIGNALduino_Get UnitTest dummyDuino 
(
 {

 	use Test2::V0;
	use Test2::Tools::Compare qw{    is like isnt unlike
	    match mismatch validator
	    hash array bag object meta number float rounded within string subset bool
	    in_set not_in_set check_set
	    item field call call_list call_hash prop check all_items all_keys all_vals all_values
	    etc end filter_items
	    T F D DNE FDNE E
	    event fail_events
	    exact_ref
	};

		
	
    my @mockData = (
	    {
			testname	=> "get version",
			hasCC1101	=> 0,
			input		=> "version",
			check =>  array  {
			    	item("V");
			    	end();
    			}
	    },
	    {
			testname	=> "get freeram",
			hasCC1101	=> 0,
			input		=> "freeram",
			check =>  array  {
			    	item("R");
			    	end();
    			}
	    },
	    {
			testname	=> "get uptime",
			hasCC1101	=> 0,
			input		=> "uptime",
			check =>  array  {
			    	item("t");
			    	end();
    			}
	    },
	    {
			testname	=> "get ? ",
			hasCC1101	=> 0,
			input		=> "?",
			check 		=>  array  {end(); },
			return 		=> check_set match qr/^Unknown argument \?, choose one of.*/,!match qr/cc/
	    },
	    {
			testname	=> "get ?",
			hasCC1101	=> 1,
			dummy		=> 0,
			input		=> "?",
			check 		=>  array  {end(); },
			return 		=> check_set match qr/^Unknown argument \?, choose one of.*/,match qr/cc/
	    },
	    {
			testname	=> "get ?",
			hasCC1101	=> 1,
			dummy		=> 1,
			input		=> "?",
			check 		=>  array  {end(); },
			return 		=> check_set match qr/^Unknown argument \?, choose one of availableFirmware:noArg raw$/,!match qr/cc/
	    },

	    {
			testname	=> "get ping ",
			hasCC1101	=> 0,
			input		=> "ping",
			check =>  array  {
			    	item("P");
			    	end();
    			}
	    },
	    {
			testname	=> "get config ",
			hasCC1101	=> 0,
			input		=> "config",
			check =>  array  {
			    	item("CG");
			    	end();
    			}
	    },
	    {
			testname	=> "get ccconf ",
			hasCC1101	=> 1,
			input		=> "ccconf",
			check =>  array  {
			    	item("C0DnF");
			    	end();
    			}
	    },
	    {
			testname	=> "get ccconf ",
			hasCC1101	=> 0,
			input		=> "ccconf",
			check =>  array  { end();	},
    		return 		=> "This command is only available with a cc1101 receiver"
	    },
	    {
			testname	=> "get ccreg ",
			hasCC1101	=> 1,
			input		=> "ccreg",
			check =>  array  {
			    	item("C");
			    	end();
    			}
	    },
	    {
			testname	=> "get ccreg ",
			hasCC1101	=> 0,
			input		=> "ccreg",
			check =>  array  { end();	},
    		return 		=> "This command is only available with a cc1101 receiver"
	    },
	    {
			testname	=> "get ccpatable ",
			hasCC1101	=> 1,
			input		=> "ccpatable",
			check =>  array  {
			    	item("C3E");
			    	end();
    			}
	    },
	    {
			testname	=> "get ccpatable ",
			hasCC1101	=> 0,
			input		=> "ccpatable",
			check =>  array  { end();	},
    		return 		=> "This command is only available with a cc1101 receiver"
			
	    },

    );

	plan (scalar @mockData);	
	my $todo=undef;
	
	foreach my $element (@mockData)
	{
		next if (!exists($element->{testname}));
		$targetHash->{hasCC1101} = exists($element->{hasCC1101}) ? $element->{hasCC1101} : 0;
		CommandAttr(undef,"$target dummy $element->{dummy}") if (exists($element->{dummy}));
		
		$targetHash->{hasCC1101} = exists($element->{hasCC1101}) ? $element->{hasCC1101} : 0;

		$element->{pre_code}->() if (exists($element->{pre_code}));
		$todo=$element->{todo}->() if (exists($element->{todo}));
		
		subtest "checking $element->{testname}". ($targetHash->{hasCC1101} ? " with cc1101" : " without cc1101") => sub {
			plan (2);	
			
			my $ret = SIGNALduino_Get($targetHash,$target,split(" ",$element->{input}));
			is($ret,$element->{return},"Verify return value");
			is($targetHash->{QUEUE},$element->{check},"Verify expected queue element entrys", explain $targetHash->{QUEUE});

			@{$targetHash->{QUEUE}}=();
			
		};
		undef ($todo);
		$element->{post_code}->() if (exists($element->{post_code}));
	
	};
	
	subtest 'Test get raw MS;P1=309;' => sub {
		plan tests => 1;
		my $mock = Mock::Sub->new;
	 	my $SD_Parse = $mock->mock('SIGNALduino_Parse');
		my $rawArg="MS;P1=309;";
		my $ret=SIGNALduino_Get($targetHash, $target, "raw", $rawArg);
		
		if ($SD_Parse->called)
		{
			is( ($SD_Parse->called_with)[3], "\002".$rawArg."\003" , 'check if SIGNALduino_Parse was called' ) || diag(explain $SD_Parse);
		} 
		$SD_Parse->unmock;
	}; 

	subtest 'Test device with dummy attrib 1' => sub {
		plan tests => 3;

		subtest 'Test Attributes (hardware undef)' => sub {
			plan tests => 2;
			is(AttrVal($target, "dummy", 0),1,"check attrib dummy is 1");
			delete $attr{$target}{hardware} if (AttrVal($target, "hardware", undef));
			is(AttrVal($target, "hardware", undef),undef,"check attrib hardware undef");
		};

		subtest 'Test allowed - get commands' => sub {
			my $ret=SIGNALduino_Get($targetHash, $target, "?");

			my @tests = split(" ", substr($ret,index($ret,"one of")+7));
			my $tests = scalar(@tests);
			plan tests => $tests;

			like($ret,qr/^Unknown argument \?, .*availableFirmware:noArg.*/,"check cmd availableFirmware accepted");
			like($ret,qr/^Unknown argument \?, .*raw$/,"check cmd raw accepted");
		};

		subtest 'Test not allowed - get commands' => sub {
			my $ret=SIGNALduino_Get($targetHash, $target, "?");
			plan tests => 9;

			unlike($ret,qr/.*ccconf.*/,"check cmd ccconf not allowed");
			unlike($ret,qr/.*ccpatable.*/,"check cmd ccpatable not allowed");
			unlike($ret,qr/.*ccreg.*/,"check cmd ccreg not allowed");
			unlike($ret,qr/.*cmds.*/,"check cmd cmds not allowed");
			unlike($ret,qr/.*config.*/,"check cmd config not allowed");
			unlike($ret,qr/.*freeram.*/,"check cmd freeram not allowed");
			unlike($ret,qr/.*ping.*/,"check cmd ping not allowed");
			unlike($ret,qr/.*uptime.*/,"check cmd uptime not allowed");
			unlike($ret,qr/.*version.*/,"check cmd version not allowed");
		};
	};
	
	subtest 'Test device with hardware attribute and dummy is 0' => sub {
		plan tests => 2;
		subtest 'Test Attributes (hardware nano328)' => sub {
			plan tests => 2;
			$attr{$target}{dummy} = "0";
			$attr{$target}{hardware} = "nano328";
			is(AttrVal($target, "dummy", 0),0,"check attrib dummy is 0");
			is(AttrVal($target, "hardware", undef),"nano328","check attrib hardware set nano328");
		};
			
		subtest 'Test allowed - get commands' => sub {
			my $ret=SIGNALduino_Get($targetHash, $target, "?");

			note("if a new command is developed, the test must be expanded --> otherwise error");
			my @tests = split(" ", substr($ret,index($ret,"one of")+7));
			my $tests = scalar(@tests);
			plan tests => $tests;

			like($ret,qr/^Unknown argument \?, .*availableFirmware:noArg.*/,"check cmd availableFirmware accepted");
			like($ret,qr/^Unknown argument \?, .*cmds.*/,"check cmd cmds accepted");
			like($ret,qr/^Unknown argument \?, .*config.*/,"check cmd config accepted");
			like($ret,qr/^Unknown argument \?, .*freeram.*/,"check cmd freeram accepted");
			like($ret,qr/^Unknown argument \?, .*ping.*/,"check cmd ping accepted");
			like($ret,qr/^Unknown argument \?, .*raw.*/,"check cmd raw accepted");
			like($ret,qr/^Unknown argument \?, .*uptime.*/,"check cmd uptime accepted");
			like($ret,qr/^Unknown argument \?, .*version.*/,"check cmd version accepted");
		};
	}
}
)
