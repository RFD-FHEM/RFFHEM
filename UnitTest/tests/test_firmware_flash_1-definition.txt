defmod test_firmware_flash_1 UnitTest dummyDuino 
(
 {
	my $mock;
    my $system_call;
	
	BEGIN {
		$mock = Mock::Sub->new;
		$system_call = $mock->mock('system');
	}	
	
	subtest 'flash without hardware parameter set' => sub {
		plan tests => 1;
		$attr{$target}{hardware} = "";
		my $ret = SIGNALduino_Set($targetHash, $target, "flash" ,"");
		like( $ret, qr/^Please define your hardware!/, "check return value without hardware");
	}; 
	
	subtest 'flash without argument passed (nano328)' => sub {
		plan tests => 1;
		$attr{$target}{hardware} = "nano328";
		my $ret = SIGNALduino_Set($targetHash, $target, "flash" ,"");
		like( $ret, qr/^ERROR: argument failed! flash/, "check return value without argument");
	}; 
	
	subtest 'flash without avrdude installed (nano328)' => sub {
		plan tests => 1;
		$attr{$target}{hardware} = "nano328";
		my $ret = SIGNALduino_Set($targetHash, $target, "flash" ,"./fhem/test.hex");
		like( $ret, qr/^avrdude is not installed./, "check return value without avrdude installed");
	}; 


	subtest 'flash without avrdude installed (nano328)' => sub {
		plan tests => 1;
		$attr{$target}{hardware} = "nano328";
		my $ret = SIGNALduino_Set($targetHash, $target, "flash" ,"./fhem/test.hex");
		like( $ret, qr/^avrdude is not installed./, "check return value without avrdude installed");
	}; 

	subtest 'flash avrdude installed (nano328)' => sub {
		plan tests => 5;
		$attr{$target}{hardware} ="nano328";
		my $path = $ENV{'PATH'};
		my $IntTimer = $mock->mock('main::InternalTimer');

		$ENV{'PATH'}="/opt/fhem/contrib";
		my $ret = SIGNALduino_Set($targetHash, $target, "flash" ,"./fhem/test.hex");
		$ENV{'PATH'}=$path;

		is($ret, undef, "check return value with avrdude installed");		
		is($IntTimer->called_count, 1, "check if InternalTimer is called once");		
		my @called_args=$IntTimer->called_with;
		$IntTimer->unmock;
		
		ok($called_args[0] > gettimeofday(), "check arg 1 InternalTimer is called ");		
		is($called_args[1], "SIGNALduino_flash", "check arg 2 InternalTimer is called ");		
		is($called_args[2], $target, "check arg 3 InternalTimer is called ");		

	}; 
	
	subtest 'SIGNALduino_flash called (nano328)' => sub {
		plan tests => 2;
		$attr{$target}{hardware} ="nano328";
		#my $system_call = $mock->mock('CORE::GLOBAL::system');

		my $ret = SIGNALduino_flash($target);
		#is($system_call->called_count, 1, "check if system is called once");		
		
		is($ret, undef, "check return value");		
		#like($targetHash->{helper}{avrdudelogs}, '/^command: avrdude -c arduino -b \d+ -P none -p atmega328p -vv -U flash:w:.\/fhem\/test\.hex 2>\[LOGFILE\]$/m', "avrdude parameter check");
		is($targetHash->{helper}{avrdudecmd},'avrdude -c arduino -b 57600 -P none -p atmega328p -vv -U flash:w:./fhem/test.hex 2>./log/SIGNALduino-Flash.log',"check avrdude cmd");
	}; 

	subtest 'flash avrdude installed (radinoCC1101)' => sub {
		plan tests => 7;
		$attr{$target}{hardware} ="radinoCC1101";
		my $path = $ENV{'PATH'};
		my $IntTimer = $mock->mock('main::InternalTimer');

		$ENV{'PATH'}="/opt/fhem/contrib";
		my $ret = SIGNALduino_Set($targetHash, $target, "flash" ,"./fhem/test.hex");
		$ENV{'PATH'}=$path;
		is($ret, undef, "check return value with avrdude installed");		
		is($IntTimer->called_count, 1, "check if InternalTimer is called once");		
		my @called_args=$IntTimer->called_with;
		$IntTimer->unmock;

		like($targetHash->{helper}{stty_output},'/^open3: exec of stty -F none ospeed 1200 ispeed 1200 failed/m',"check if stty was called");
		ok($called_args[0] > gettimeofday(), "check arg 1 InternalTimer is called ");		
		is($called_args[1], "SIGNALduino_flash", "check arg 2 InternalTimer is called ");		
		is($called_args[2], $target, "check arg 3 InternalTimer is called ");		
		is($targetHash->{helper}{avrdudecmd},'avrdude -c avr109 -b 57600 -P none -p atmega32u4 -vv -D -U flash:w:./fhem/test.hex 2>[LOGFILE]',"check avrdude cmd");

	}; 
	$targetHash->{DevState} = 'initialized';

}
)
