defmod test_proto84 UnitTest dummyDuino ( 
{ 
 my $rmsg="MU;P0=-21520;P1=235;P2=-855;P3=846;P4=620;P5=-236;P7=-614;D=012323232454545454545451717451717171745171717171717171717174517171745174517174517174545;CP=1;R=217;";      
 my %signal_parts=SIGNALduino_Split_Message($rmsg,$targetHash->{NAME});     
 is(SIGNALduino_Parse_MU($targetHash, $targetHash, $targetHash->{NAME}, $rmsg,%signal_parts) ,1,"MU Data dispatched");
 my $mock = Mock::Sub->new; 	
 my $SD_Dispatch = $mock->mock("SIGNALduno_Dispatch");  	
 SIGNALduino_Parse_MU($targetHash, $targetHash, $targetHash->{NAME}, $rmsg,%signal_parts);
 is( ($SD_Dispatch->called_with)[4], "84", "SIGNALduno_Dispatch check id" );
 is( ($SD_Dispatch->called_with)[2], "W84#FE42004526", "SIGNALduno_Dispatch check dmsg" );
 my $sensorname="SD_WS_84_TH_1";
 ok(!IsDevice($sensorname), "check Sensor not created with single dispatch");
 $SD_Dispatch->unmock;
 sleep 3;
 SIGNALduino_Parse_MU($targetHash, $targetHash, $targetHash->{NAME}, $rmsg,%signal_parts);
 ok(IsDevice("SD_WS_84_TH_1"), "check Sensor created with second dispatch");
 
 subtest 'Checking readings' => sub {
   plan tests => 5;
   sleep 3;
   SIGNALduino_Parse_MU($targetHash, $targetHash, $targetHash->{NAME}, $rmsg,%signal_parts);
   is(ReadingsVal($sensorname,"temperature","0"),"6.9","check temperature reading");
   is(ReadingsVal($sensorname,"humidity","0"),"66","check humidity reading");
   is(ReadingsVal($sensorname,"batteryState","0"),"ok","check battery reading");
   is(ReadingsVal($sensorname,"channel","0"),"1","check battery reading");
   is(ReadingsVal($sensorname,"sendmode","0"),"auto","check sendmode reading");
 }
} 
)