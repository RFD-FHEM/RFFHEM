defmod test_modulematch_1 UnitTest dummyDuino (
 { 
	my %ProtocolListTest =  SIGNALduino_LoadProtocolHash("$attr{global}{modpath}/FHEM/lib/test_loadprotohash-ok.hash");
	is($ProtocolListTest{error},undef,"load test protocol hash ");

	
	foreach my $id (qw/9999 9998/)
	{
		is($ProtocolListTest{$id}{id},$id,"id $id exists");
	}
	my $local_ProtocolListSIGNALduino = SIGNALduino_getProtocolList();
	foreach (keys %$local_ProtocolListSIGNALduino)
    {
        delete $local_ProtocolListSIGNALduino->{$_};
    }
	%{$local_ProtocolListSIGNALduino} = ( %ProtocolListTest);

	
 
	subtest 'SIGNALduino_moduleMatch scenarios without whitlistIDs and development attr' => sub {
		plan tests => 4;
		$local_ProtocolListSIGNALduino->{'9999'}{developId}="m";
		SIGNALduino_IdList("x:$target","","","");

		is(SIGNALduino_moduleMatch($target,'9999',"X3332222"),-1,"check returncode without modulematch");

		$local_ProtocolListSIGNALduino->{'9999'}{modulematch}="^X[A-Fa-f0-9]+";
		is(SIGNALduino_moduleMatch($target,'9999',"X3332222"),-1,"check returncode with matching modulematch");
		is(SIGNALduino_moduleMatch($target,'9999',"Y3332222"),0,"check returncode with not matching modulematch");
		is(SIGNALduino_moduleMatch($target,'9999',"X3332222"),-1,"check returncode with matching modulematch");
	};
	
	
	subtest 'SIGNALduino_moduleMatch scenarios with whitlistIDs, whithout development attr' => sub {
		plan tests => 4;
		SIGNALduino_IdList("x:$target","9999","","");

		is(SIGNALduino_moduleMatch($target,'9999',"X3332222"),1,"check returncode without modulematch");

		is(SIGNALduino_moduleMatch($target,'9999',"X3332222"),1,"check returncode with matching modulematch");
		is(SIGNALduino_moduleMatch($target,'9999',"Y3332222"),0,"check returncode with not matching modulematch");


		is(SIGNALduino_moduleMatch($target,'9998',"X33322221"),1,"check returncode without modulematch");
		

	};
	
	subtest 'SIGNALduino_moduleMatch scenarios without whitlistIDs but development attr' => sub {
		plan tests => 3;

		SIGNALduino_IdList("x:$target","","","m");
		is(SIGNALduino_moduleMatch($target,'9999',"X3332222"),-1,"check returncode with matching modulematch but wrong development attr");

		SIGNALduino_IdList("x:$target","","","m9999");
		$local_ProtocolListSIGNALduino->{'9999'}{modulematch}="^X[A-Fa-f0-9]+";
		is(SIGNALduino_moduleMatch($target,'9999',"X3332222"),1,"check returncode with matching modulematch and right development attr");
		is(SIGNALduino_moduleMatch($target,'9999',"Y3332222"),0,"check returncode with not matching modulematch");
	};
	CommandReload(undef,"00_SIGNALduino.pm");
	SIGNALduino_IdList("x:$target","","","");  

	foreach my $id (qw/9999 9998/)
	{
		isnt($local_ProtocolListSIGNALduino->{$id},$id,"check if id $id is deleted");
	}

 }
);

