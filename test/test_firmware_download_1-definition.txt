defmod test_firmware_download_1 UnitTest dummyDuino 
(
 {
	my $mock = Mock::Sub->new;
	Log3 $name , 3, "Test starting";

	my $HTTP_CALL = $mock->mock("HttpUtils_NonblockingGet");
	$targetHash->{additionalSets}{flash} = "r1.2.4";

	subtest 'flash without hardware parameter set' => sub {
		plan tests => 1;
		$attr{$target}{hardware} = undef;
		SIGNALduino_Set($targetHash, $target, "flash" ,"r1.2.4");
		is($HTTP_CALL->called_count, 0, "HttpUtils_NonblockingGet not called");
	}; 
	
	subtest 'flash with esp hardware parameter set' => sub {
		plan tests => 2;
		$attr{$target}{hardware} = "ESP_1M";
		SIGNALduino_Set($targetHash, $target, "flash" ,"r1.2.4");
		is($HTTP_CALL->called_count, 1, "HttpUtils_NonblockingGet is called");
		my @called_args = $HTTP_CALL->called_with;
		like( $called_args[0]{url}, qr/SIGNALESP/, "Download URL set to SIGNALESP Repo" );
	}; 
	subtest 'flash with nano hardware parameter set' => sub {
		plan tests => 2;
		$attr{$target}{hardware} = "nano";
		SIGNALduino_Set($targetHash, $target, "flash" ,"r1.2.4");
		is($HTTP_CALL->called_count, 2, "HttpUtils_NonblockingGet is called");
		my @called_args = $HTTP_CALL->called_with;
		like( $called_args[0]{url}, qr/SIGNALDuino/, "Download URL set to SIGNALDuino Repo" );
	};
	
	subtest 'check prerelease without hardware parameter set' => sub {
		plan tests => 1;
		my $param = {
			hash       => $targetHash,    
			command    => "queryReleases"
		};
		$attr{$target}{hardware} = undef;
		$attr{$target}{updateChannelFW} = 'testing';

		my ($error, @json) = FileRead($attr{global}{modpath}."/FHEM/lib/test_firmware_releases.json");
		if ($error eq "") {
			Log3 $name , 3, "json @json";
			my $jsonstr=join ("\n",@json);
			SIGNALduino_githubParseHttpResponse($param,"",$jsonstr);
			TODO: {
				local $TODO = "hardware check not implemented";
				unlike($targetHash->{additionalSets}{flash},qr/3.3.1-RC10/,"check if testing firmware is found");
			}
		} else {
			diag("open json firmware file was not possible $error");
		}
	};
	
	subtest 'check prerelease with hardware parameter set to nano' => sub {
		plan tests => 1;
		my $param = {
			hash       => $targetHash,    
			command    => "queryReleases"
		};
		$attr{$target}{hardware} = "nano";
		$attr{$target}{updateChannelFW} = 'testing';

		my ($error, @json) = FileRead($attr{global}{modpath}."/FHEM/lib/test_firmware_releases.json");
		if ($error eq "") {
			Log3 $name , 3, "json @json";
			my $jsonstr=join ("\n",@json);
			SIGNALduino_githubParseHttpResponse($param,"",$jsonstr);
			like($targetHash->{additionalSets}{flash},qr/3.3.1-RC10/,"check if testing firmware is found");
		} else {
			diag("open json firmware file was not possible $error");
		}
	};
	subtest 'check prerelease with hardware parameter set to ESP_1M' => sub {
		plan tests => 1;
		my $param = {
			hash       => $targetHash,    
			command    => "queryReleases"
		};
		$attr{$target}{hardware} = "ESP_1M";
		$attr{$target}{updateChannelFW} = 'testing';

		my ($error, @json) = FileRead($attr{global}{modpath}."/FHEM/lib/test_firmware_releases.json");
		if ($error eq "") {
			Log3 $name , 3, "json @json";
			my $jsonstr=join ("\n",@json);
			SIGNALduino_githubParseHttpResponse($param,"",$jsonstr);
			TODO: {
				local $TODO = "hardware check not implemented";
				like($targetHash->{additionalSets}{flash},qr/3.3.1-RC10/,"check if testing firmware is found");
			}
		} else {
			diag("open json firmware file was not possible $error");
		}
	};

	subtest 'check stable with hardware parameter set to nanocc1101' => sub {
		plan tests => 1;
		my $param = {
			hash       => $targetHash,    
			command    => "queryReleases"
		};
		$attr{$target}{hardware} = "nanocc1101";
		$attr{$target}{updateChannelFW} = 'stable';

		my ($error, @json) = FileRead($attr{global}{modpath}."/FHEM/lib/test_firmware_releases.json");
		if ($error eq "") {
			Log3 $name , 3, "json @json";
			my $jsonstr=join ("\n",@json);
			SIGNALduino_githubParseHttpResponse($param,"",$jsonstr);
			TODO: {
				local $TODO = "hardware check not implemented";
				unlike($targetHash->{additionalSets}{flash},qr/3.3.0/,"check if testing firmware is found");
			}
		} else {
			diag("open json firmware file was not possible $error");
		}
	};
	subtest 'check stable with hardware parameter set to nano' => sub {
		plan tests => 1;
		my $param = {
			hash       => $targetHash,    
			command    => "queryReleases"
		};
		$attr{$target}{hardware} = "nano";
		$attr{$target}{updateChannelFW} = 'stable';

		my ($error, @json) = FileRead($attr{global}{modpath}."/FHEM/lib/test_firmware_releases.json");
		if ($error eq "") {
			Log3 $name , 3, "json @json";
			my $jsonstr=join ("\n",@json);
			SIGNALduino_githubParseHttpResponse($param,"",$jsonstr);
			local $TODO = "hardware check not implemented";
			like($targetHash->{additionalSets}{flash},qr/3.3.0/,"check if testing firmware is found");
		} else {
			diag("open json firmware file was not possible $error");
		}
	};



}
)
