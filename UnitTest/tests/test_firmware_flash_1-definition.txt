defmod test_firmware_flash_1 UnitTest dummyDuino 
(
 {
	my $mock;
    my $system_call;
    my $OpenDev;
	
	BEGIN {
		$mock = Mock::Sub->new;
		$system_call = $mock->mock('system');
		$OpenDev = $mock->mock('DevIo_OpenDev');
	}	
	$OpenDev->unmock;
	my $path = $ENV{'PATH'};
	my $logdir = AttrVal("global", "logdir", "./log/");	
	my $preparedavrdudecmd;
		
	subtest 'set flash without hardware parameter set' => sub {
		plan tests => 1;
		$attr{$target}{hardware} = "";
		my $ret = SIGNALduino_Set($targetHash, $target, "flash" ,"");
		like( $ret, qr/^Please define your hardware!/, "check return value without hardware");
	}; 
	
	subtest 'set flash without argument passed (nano328)' => sub {
		plan tests => 1;
		$attr{$target}{hardware} = "nano328";
		my $ret = SIGNALduino_Set($targetHash, $target, "flash" ,"");
		like( $ret, qr/^ERROR: argument failed! flash/, "check return value without argument");
	}; 
	
	subtest 'set flash without avrdude installed (nano328)' => sub {
		plan tests => 1;
		$attr{$target}{hardware} = "nano328";
		my $ret = SIGNALduino_Set($targetHash, $target, "flash" ,"./fhem/test.hex");
		like( $ret, qr/^avrdude is not installed./, "check return value without avrdude installed");
	}; 

	subtest 'set flash avrdude installed (nano328)' => sub {
		plan tests => 5;
		$attr{$target}{hardware} ="nano328";
		my $IntTimer = $mock->mock('main::InternalTimer');

		$ENV{'PATH'}="/opt/fhem/contrib";
		my $ret = SIGNALduino_Set($targetHash, $target, "flash" ,"./fhem/test.hex");
		$ENV{'PATH'}=$path;

		is($ret, undef, "check return value with avrdude installed");		
		is($IntTimer->called_count, 1, "check if InternalTimer is called once");		
		my @called_args=$IntTimer->called_with;
		$IntTimer->unmock;
		
		ok($called_args[0] > gettimeofday(), "check arg 1 InternalTimer is called ");		
		is($called_args[1], "SIGNALduino_flash", "check arg 2 InternalTimer is called ");		
		is($called_args[2], $target, "check arg 3 InternalTimer is called ");	
		
		$preparedavrdudecmd = $targetHash->{helper}{avrdudecmd};	
	}; 
	
	subtest 'SIGNALduino_flash called not installed avrdude (nano328)' => sub {
		plan tests => 12;
		$attr{$target}{hardware} ="nano328";
		$OpenDev->remock;
		
		$targetHash->{helper}{stty_pid} = "999494";	
		my $ret = SIGNALduino_flash($target);
		
		is($ret, "ERROR: avrdude exited with error", "check return value");		
		is($targetHash->{FLASH_RESULT},$ret, "check internal value");		
		is($targetHash->{helper}{stty_pid}, undef, "check stty_pid value");		
		
		is(ReadingsVal($target,"state",""),"FIRMWARE UPDATE with error","check reading state");
		is($targetHash->{helper}{avrdudecmd},'avrdude -c arduino -b 57600 -P none -p atmega328p -vv -U flash:w:./fhem/test.hex 2>./log/SIGNALduino-Flash.log || avrdude -c arduino -b 115200 -P none -p atmega328p -vv -U flash:w:./fhem/test.hex 2>./log/SIGNALduino-Flash.log',"check avrdude cmd");
		is($OpenDev->called_count, 1, "check if DevIO_OpenDev is called once");		

		$targetHash->{helper}{avrdudecmd} = $preparedavrdudecmd;	

		CommandAttr(undef,"global logdir ./jiddsidio/log/");
		$ret = SIGNALduino_flash($target);
		
		is($ret, "WARNING: avrdude created no log file", "check return value");		
		is($targetHash->{FLASH_RESULT},$ret, "check internal value");		
		is($targetHash->{helper}{stty_pid}, undef, "check stty_pid value");		
		
		is(ReadingsVal($target,"state",""),"FIRMWARE UPDATE with error","check reading state");
		is($targetHash->{helper}{avrdudecmd},'avrdude -c arduino -b 57600 -P none -p atmega328p -vv -U flash:w:./fhem/test.hex 2>./jiddsidio/log/SIGNALduino-Flash.log || avrdude -c arduino -b 115200 -P none -p atmega328p -vv -U flash:w:./fhem/test.hex 2>./jiddsidio/log/SIGNALduino-Flash.log',"check avrdude cmd");
		is($OpenDev->called_count, 2, "check if DevIO_OpenDev is called once");		
		$OpenDev->unmock;
		CommandAttr(undef,"global logdir $logdir");
		$targetHash->{helper}{avrdudecmd} = $preparedavrdudecmd;	
	}; 

	
	subtest 'SIGNALduino_flash called installed avrdude (nano328)' => sub {
		plan tests => 4;
		$attr{$target}{hardware} ="nano328";
		$OpenDev->remock;
		$targetHash->{FLASH_RESULT} = "some dummy message";
		$ENV{'PATH'}="/opt/fhem/contrib";
		my $ret = SIGNALduino_flash($target);
		$ENV{'PATH'}=$path;
		
		is($ret, undef, "check return value");		
		is($targetHash->{FLASH_RESULT},undef, "check internal value");		
		is(ReadingsVal($target,"state",""),"FIRMWARE UPDATE successfull","check reading state");
		is($OpenDev->called_count, 1, "check if DevIO_OpenDev is called once");		
		$OpenDev->unmock;
	}; 
	


	subtest 'set flash avrdude installed (radinoCC1101)' => sub {
		plan tests => 9;
		$attr{$target}{hardware} ="radinoCC1101";
		my $IntTimer = $mock->mock('main::InternalTimer');
		
		$ENV{'PATH'}="/opt/fhem/contrib";
		my $ret = SIGNALduino_Set($targetHash, $target, "flash" ,"./fhem/test.hex");
		is($ret, undef, "check return value with avrdude installed");		
		is($IntTimer->called_count, 1, "check if InternalTimer is called once");		
		my @called_args=$IntTimer->called_with;

		like($targetHash->{helper}{stty_output},'/^open3: exec of stty -F none ospeed 1200 ispeed 1200 failed/m',"check if stty was called");
		ok($called_args[0] > gettimeofday(), "check arg 1 InternalTimer is called ");		
		is($called_args[1], "SIGNALduino_flash", "check arg 2 InternalTimer is called ");		
		is($called_args[2], $target, "check arg 3 InternalTimer is called ");		
		is($targetHash->{helper}{avrdudecmd},'avrdude -c avr109 -b 57600 -P none -p atmega32u4 -vv -D -U flash:w:./fhem/test.hex 2>[LOGFILE]',"check avrdude cmd");
		
		$targetHash->{DeviceName}='/dev/serial/by-id/usb-Unknown_radino_CC1101-if00@57600';
		$ret = SIGNALduino_Set($targetHash, $target, "flash" ,"./fhem/test.hex");
		$ENV{'PATH'}=$path;
		is($ret, undef, "check SIGNALduino_Set return value");		
		
		is($targetHash->{helper}{avrdudecmd},'avrdude -c avr109 -b 57600 -P /dev/serial/by-id/usb-In-Circuit_radino_CC1101-if00 -p atmega32u4 -vv -D -U flash:w:./fhem/test.hex 2>[LOGFILE]',"check avrdude cmd");
		$targetHash->{DeviceName}='none';
		$IntTimer->unmock;
		
	}; 
	
	subtest 'set flash avrdude installed (esp8266,esp32)' => sub {
		plan tests => 2;
		$ENV{'PATH'}="/opt/fhem/contrib";

		$attr{$target}{hardware} ="ESP8266";
		my $ret = SIGNALduino_Set($targetHash, $target, "flash" ,"./fhem/test.hex");
		is($ret, "Sorry, Flashing your ESP via Module is currently not supported.", "check return value for ESP8266");		
		
		$attr{$target}{hardware} ="ESP32";
		$ret = SIGNALduino_Set($targetHash, $target, "flash" ,"./fhem/test.hex");
		is($ret, "Sorry, Flashing your ESP via Module is currently not supported.", "check return value for ESP32");		


		$ENV{'PATH'}=$path;
	}; 
	
	CommandDefMod(undef,"$target $targetHash->{TYPE} $targetHash->{DEF}");

}
)
