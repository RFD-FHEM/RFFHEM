defmod test_SD_Protocols UnitTest dummyDuino 
(
 {
	require_ok('lib::SD_Protocols'); 
	require lib::SD_Protocols;
	use Test2::V0;

	subtest 'lib SD_Prococols test sub LoadHash() ' => sub {
		plan tests => 5;
		my $ret;
		
		$ret=lib::SD_Protocols::LoadHash("./dummy.pm");
		like($ret->{error},qr/does not exsits/,"wrong filename ");
		$ret=lib::SD_Protocols::LoadHash("./FHEM/lib/test_loadprotohash-nok.pm");
		like($ret->{error},qr/syntax error at/,"file with syntax error ");

		$ret=lib::SD_Protocols::LoadHash("./FHEM/lib/test_loadprotohash-ok.pm");
		ref_ok($ret,"HASH","valid file hashref");
		like($ret->{9999}{name},qr/Unittest/,"valid element hashref");

		is($ret->{error},undef,"valid file error check");
		
	};
	
	subtest 'lib SD_Prococols test sub new() ' => sub {
		plan tests => 3;
		isnt(lib::SD_Protocols::new("dummy.pm"),undef," not existing filename provided ");
		isnt(lib::SD_Protocols::new("$attr{global}{modpath}/FHEM/lib/test_loadprotohash-nok.pm"),undef,"file with syntax error ");
		is(lib::SD_Protocols::new("$attr{global}{modpath}/FHEM/lib/test_loadprotohash-ok.pm"),undef,"valid file checked ");
	};

	
	subtest 'lib SD_Prococols test sub exists() ' => sub {
		plan tests => 2;
		ok(lib::SD_Protocols::exists(9999),"exists() check existing protocol ");
		ok(!lib::SD_Protocols::exists(0),"exists() check not existing protocol ");
	};
	
	subtest 'lib SD_Prococols test sub getKeys() ' => sub {
		plan tests => 3;
		cmp_ok( lib::SD_Protocols::getKeys(),'>=',"9",' more than 8 keys returnd' );
		like(join(",",lib::SD_Protocols::getKeys()), qr/9999/, 'protocol id 9999 is in keys');
		ok( !grep(/^0$/, lib::SD_Protocols::getKeys()), 'protocol id 0 is not in keys' );
		
	};
	
	subtest 'lib SD_Prococols test sub checkProperty() ' => sub {
		plan tests => 3;
		is(lib::SD_Protocols::checkProperty(9999,"developId"), 'm', 'check existing property developID');
		is(lib::SD_Protocols::checkProperty(9999,"clockabs"), undef, 'check missing property clockabs');
		is(lib::SD_Protocols::checkProperty(9999,"clockabs",200), 200, 'check missing property clockabs with default');
	};

	subtest 'lib SD_Prococols test sub getProperty() ' => sub {
		plan tests => 2;
		is(lib::SD_Protocols::getProperty(9999,"developId"), 'm', 'check existing property developID');
		is(lib::SD_Protocols::getProperty(9999,"clockabs"), undef, 'check missing property clockabs');
	};
	
	subtest 'lib SD_Prococols test sub setDefaults() ' => sub {
		plan tests => 2;
		is_deeply(lib::SD_Protocols::getProperty(9990,"method"), \&lib::SD_Protocols::MCRAW, 'check if default for method is applied ');
		is(defined(&{lib::SD_Protocols::getProperty(9989,"method")}), '', 'check if default does not override existing method ');
	};
	
	subtest 'lib SD_Prococols test sub MCRAW() ' => sub {
		plan tests => 2;
		TODO: {
		local $TODO = "Syntax fix needed";
		}
		my @mcraw_ret = lib::SD_Protocols::MCRAW($target,"11110000",9990,8);
		my @exprected_ret = qw ( 1 F0) ;
		is_deeply(\@mcraw_ret, \@exprected_ret , 'check with max_length output');

		my @mcraw_ret = lib::SD_Protocols::MCRAW($target,"11110000",9990,9);
		@exprected_ret =( -1, " message is to long") ;
		is_deeply(\@mcraw_ret, \@exprected_ret , 'check > max_length output');
	};
    our %ProtocolListSIGNALduino = SIGNALduino_LoadProtocolHash("$attr{global}{modpath}/FHEM/lib/SD_ProtocolData.pm");
	SIGNALduino_IdList("x:$target","","","");  
 }
);
