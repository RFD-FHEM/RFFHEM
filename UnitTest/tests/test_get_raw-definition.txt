defmod test_get_raw UnitTest dummyDuino 
(
 {

	subtest 'Test get raw questionmark' => sub {
		plan tests => 1;
		CommandAttr(undef,"$target dummy 1");
		my $rawArg="?";
		my $ret=SIGNALduino_Get($targetHash, $target, "?", $rawArg);
		like($ret,qr/^Unknown argument ?.*/,"check return contains raw message");
	}; 
	
	subtest 'Test get raw MS;P1=309;' => sub {
		plan tests => 1;
		my $mock = Mock::Sub->new;
	 	my $SD_Parse = $mock->mock('SIGNALduino_Parse');
		my $rawArg="MS;P1=309;";
		my $ret=SIGNALduino_Get($targetHash, $target, "raw", $rawArg);
		
		if ($SD_Parse->called)
		{
			is( ($SD_Parse->called_with)[3], "\002".$rawArg."\003" , 'check if SIGNALduino_Parse was called' ) || diag(explain $SD_Parse);
		} 
		$SD_Parse->unmock;
	}; 
	
	subtest 'Verify common get commands send to uC' => sub {
		plan tests => 6;
		my $mock = Mock::Sub->new;
	 	my $SD_AddSendQueue = $mock->mock('SIGNALduino_AddSendQueue');
	 	
		my $ret=SIGNALduino_Get($targetHash, $target, "version");
		if ($SD_AddSendQueue->called)
		{
			is( ($SD_AddSendQueue->called_with)[1], "V" , 'check cmd Version / SIGNALduino_AddSendQueue' ) || diag(explain $SD_AddSendQueue);
		} 
		
		$ret=SIGNALduino_Get($targetHash, $target, "freeram");
		if ($SD_AddSendQueue->called)
		{
			is( ($SD_AddSendQueue->called_with)[1], "R" , 'check cmd freeram / SIGNALduino_AddSendQueue' ) || diag(explain $SD_AddSendQueue);
		} 
		
		$ret=SIGNALduino_Get($targetHash, $target, "uptime");
		if ($SD_AddSendQueue->called)
		{
			is( ($SD_AddSendQueue->called_with)[1], "t" , 'check cmd uptime / SIGNALduino_AddSendQueue' ) || diag(explain $SD_AddSendQueue);
		} 
		$ret=SIGNALduino_Get($targetHash, $target, "cmds");
		if ($SD_AddSendQueue->called)
		{
			is( ($SD_AddSendQueue->called_with)[1], "?" , 'check cmd cmds / SIGNALduino_AddSendQueue' ) || diag(explain $SD_AddSendQueue);
		} 
		
		$ret=SIGNALduino_Get($targetHash, $target, "ping");
		if ($SD_AddSendQueue->called)
		{
			is( ($SD_AddSendQueue->called_with)[1], "P" , 'check cmd ping / SIGNALduino_AddSendQueue' ) || diag(explain $SD_AddSendQueue);
		} 
		
		$ret=SIGNALduino_Get($targetHash, $target, "config");
		if ($SD_AddSendQueue->called)
		{
			is( ($SD_AddSendQueue->called_with)[1], "CG" , 'check cmd config / SIGNALduino_AddSendQueue' ) || diag(explain $SD_AddSendQueue);
		} 
		
		
		
		$SD_AddSendQueue->unmock;
	}; 

	subtest 'Verify cc1101 get commands send to uC without cc1101' => sub {
		plan tests => 3;
		my $mock = Mock::Sub->new;
	 	my $SD_AddSendQueue = $mock->mock('SIGNALduino_AddSendQueue');
	 	$targetHash->{version} = "SIGNALDUINO 3.3.0";
		my $ret=SIGNALduino_Get($targetHash, $target, "ccconf");
		is ($ret,"This command is only available with a cc1101 receiver","Test cmd ccconf");	
		$ret=SIGNALduino_Get($targetHash, $target, "ccreg");
		is ($ret,"This command is only available with a cc1101 receiver","Test cmd ccreg");	
		$ret=SIGNALduino_Get($targetHash, $target, "ccpatable");
		is ($ret,"This command is only available with a cc1101 receiver","Test cmd ccconf");	
		$SD_AddSendQueue->unmock;
	};
		
	subtest 'Verify cc1101 get commands send to uC with cc1101' => sub {
		plan tests => 3;
		my $mock = Mock::Sub->new;
	 	my $SD_AddSendQueue = $mock->mock('SIGNALduino_AddSendQueue');
	 	$targetHash->{version} = "SIGNALDUINO cc1101 3.3.0";
	 	
		my $ret=SIGNALduino_Get($targetHash, $target, "ccconf");
		if ($SD_AddSendQueue->called)
		{
			is( ($SD_AddSendQueue->called_with)[1], "C0DnF" , 'check cmd ccconf / SIGNALduino_AddSendQueue' ) || diag(explain $SD_AddSendQueue);
		} 
		
		$ret=SIGNALduino_Get($targetHash, $target, "ccreg");
		if ($SD_AddSendQueue->called)
		{
			is( ($SD_AddSendQueue->called_with)[1], "C" , 'check cmd ccreg / SIGNALduino_AddSendQueue' ) || diag(explain $SD_AddSendQueue);
		} 
		
		$ret=SIGNALduino_Get($targetHash, $target, "ccpatable");
		if ($SD_AddSendQueue->called)
		{
			is( ($SD_AddSendQueue->called_with)[1], "C3E" , 'check cmd ccpatable / SIGNALduino_AddSendQueue' ) || diag(explain $SD_AddSendQueue);
		} 
	};

}
)
