defmod test_MS_2 UnitTest dummyDuino (
{
	my $mock = Mock::Sub->new;
	my $SD_Dispatch = $mock->mock("SIGNALduno_Dispatch");
	
	my %ProtocolListTest =  SIGNALduino_LoadProtocolHash("$attr{global}{modpath}/FHEM/lib/test_loadprotohash-ok.hash");
	my $local_ProtocolListSIGNALduino = SIGNALduino_getProtocolList();
	%{$local_ProtocolListSIGNALduino} = ( %ProtocolListTest);

	foreach my $pID (keys %$local_ProtocolListSIGNALduino)
	{	
		next if (!exists($local_ProtocolListSIGNALduino->{$pID}{test_data}{$name}));
    	foreach my $testData (values %$local_ProtocolListSIGNALduino->{$pID}{test_data}{$name}) 
        {
          subtest "$testData->{desc}" => sub {
              SIGNALduino_IdList("sduino_IdList:$target",$pID);
              $SD_Dispatch->reset();
              my $rmsg=$testData->{input};

              plan tests => scalar @{$testData->{output}};
              my %signal_parts=SIGNALduino_Split_Message($rmsg,$targetHash->{NAME});
              is(SIGNALduino_Parse_MS($targetHash, $targetHash, $targetHash->{NAME}, $rmsg,%signal_parts),$testData->{output}[0] ,"check return code SIGNALduino_Parse_MS") if (defined($testData->{output}[0]));
              is($SD_Dispatch->called_count, $testData->{output}[1], "check number of dispatch attempts") if (defined($testData->{output}[1]));
              is( ($SD_Dispatch->called_with)[4], $testData->{output}[2], "SIGNALduno_Dispatch check id " ) if (defined($testData->{output}[2]));
              is( ($SD_Dispatch->called_with)[2], $testData->{output}[3], "SIGNALduno_Dispatch check dmsg" ) if (defined($testData->{output}[3]));
          };
        }
    }
 }
);