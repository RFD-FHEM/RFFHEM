defmod test_proto85 UnitTest dummyDuino ( 
{ 
 my $rmsg="MU;P0=7944;P1=-724;P2=742;P3=241;P4=-495;P5=483;P6=-248;D=01212121343434345656343434563434345634565656343434565634343434343434345634345634345634343434343434343434345634565634345656345634343456563421212121343434345656343434563434345634565656343434565634343434343434345634345634345634343434343434343434345634565634;CP=3;R=47;O;";      
 my %signal_parts=SIGNALduino_Split_Message($rmsg,$targetHash->{NAME});     
 is(SIGNALduino_Parse_MU($targetHash, $targetHash, $targetHash->{NAME}, $rmsg,%signal_parts) ,1,"MU Data dispatched");
 my $mock = Mock::Sub->new; 	
 my $SD_Dispatch = $mock->mock("SIGNALduno_Dispatch");  	
 SIGNALduino_Parse_MU($targetHash, $targetHash, $targetHash->{NAME}, $rmsg,%signal_parts);
 is( ($SD_Dispatch->called_with)[4], "85", "SIGNALduno_Dispatch check id" );
 is( ($SD_Dispatch->called_with)[2], "W85#0C45C601240059A30", "SIGNALduno_Dispatch check dmsg" );
 my $sensorname="SD_WS_85_THW_1";
 
 ok(!IsDevice($sensorname), "check Sensor not created with single dispatch");
 $SD_Dispatch->unmock;
 for (my $i=1; $i <= 3; $i++) {
   sleep 3;
   SIGNALduino_Parse_MU($targetHash, $targetHash, $targetHash->{NAME}, $rmsg,%signal_parts);
 }
 ok(IsDevice($sensorname), "check Sensor created with second dispatch");
 
 subtest 'Checking readings' => sub {
   plan tests => 4;
   sleep 3;
   SIGNALduino_Parse_MU($targetHash, $targetHash, $targetHash->{NAME}, $rmsg,%signal_parts);
   is(ReadingsVal($sensorname,"temperature","0"),"7.6","check temperature reading");
   is(ReadingsVal($sensorname,"humidity","0"),"89","check humidity reading");
   is(ReadingsVal($sensorname,"batteryState","0"),"ok","check battery reading");
   is(ReadingsVal($sensorname,"channel","0"),"1","check battery reading");
 }
} 
)
