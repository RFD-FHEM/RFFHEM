defmod test_sub_SIGNALduino_OSV2 UnitTest dummyDuino ( 
{ 
		subtest 'OSV2 Tests' => sub {
			plan tests => 2;
			my ($rcode,$hexresult);
	
			

			my $id=10;
			my $bitdata="1010101010101010101010101010101011001100101011001101001010110010101011010011001100101101001101010101001101001011001101001011010101010101010100110101001100101011001101010111";				($rcode,$hexresult)=SIGNALduino_OSV2($target,$bitdata,$id,length $bitdata);
			($rcode,$hexresult)=SIGNALduino_OSV2($target,$bitdata,$id,length $bitdata);
			is($rcode,1,"check returncode for single OSV2 transmission");
			is($hexresult,"44BADC5313641940741","check result for single OSV2 transmission");
			
			TODO: {
				local $TODO = "need other osv2 cases";
				$bitdata="010101010110011001010110011010010101100101010110100110011001011010011010101010011010010110011010010110101010101010101001101010011001010110011010101111010101010101010101010101010101011001100101011001101001010110010101011010011001100101101001101010101001101001011001101001011010101010101010100110101001100101011001101010111";				($rcode,$hexresult)=SIGNALduino_OSV2($target,$bitdata,$id,length $bitdata);
				($rcode,$hexresult)=SIGNALduino_OSV2($target,$bitdata,$id,length $bitdata);
				is($rcode,1,"check returncode for first incomplete and second complete OSV2 transmission");
				is($hexresult,"44BADC5313641940741","check result for incomplete and second complete OSV2 transmission");

				$bitdata="10101010101010101010101010101010110011001010110011010010101100101010110100110011001011010011010101010011010010110011010010110101010101010101001101010011001010110011010101111010101010101010101010101010101011001100101011001101001010110010101011010011001100101101001101010101001101001011001101001011010101010101010100110101001100101011001101010111";				($rcode,$hexresult)=SIGNALduino_OSV2($target,$bitdata,$id,length $bitdata);
				($rcode,$hexresult)=SIGNALduino_OSV2($target,$bitdata,$id,length $bitdata);
				is($rcode,1,"check returncode for double OSV2 transmission");
				is($hexresult,"44BADC5313641940741","check result for double OSV2 transmission");

		};

		subtest 'OSV3 Tests' => sub {
			plan tests => 12;
			my $id=10;
			my ($rcode,$hexresult);
			
			my $bitdata="11111111111111010111110001010000101000100000100000110000000100000001000010000001110100100011001";
			($rcode,$hexresult)=SIGNALduino_OSV2($target,$bitdata,$id,length $bitdata);
			is($rcode,1,"check result for single OSV3 transmission");
			is($hexresult,"50FA281441302020042E31","check result for single OSV3 transmission");

			$bitdata="11111111111111010111110001010000101000100000100000110000000100000001000010000001110100100011001111111111111111111111110101111100010100001010001000001000";
			($rcode,$hexresult)=SIGNALduino_OSV2($target,$bitdata,$id,length $bitdata);
			is($rcode,1,"check result for seconds OSV3 transmission to short");
			is($hexresult,"50FA281441302020042E31","check result for seconds OSV3 transmission to short");

			$bitdata="01010000101000100000100000110000000100000001000010000001110100100011001111111111111111111111110101111100010100001010001000001000001100000001000000010000100000011101001000110011";
			
			($rcode,$hexresult)=SIGNALduino_OSV2($target,$bitdata,$id,length $bitdata);
			is($rcode,1,"check result for first is incomplete, seconds OSV3 transmission is okay");
			is($hexresult,"50FA281441302020042E31","check result for first is incomplete, seconds OSV3 transmission is okay");

			$bitdata="01010000101000100000100000110000000100000001000010000001110100100011001111111111111111111111110101111100010100001010001000001000001100000001000000010000100000011101001000110011";
			
			($rcode,$hexresult)=SIGNALduino_OSV2($target,$bitdata,$id,length $bitdata);
			is($rcode,1,"check result for two complete transmissions");
			is($hexresult,"50FA281441302020042E31","check result for two complete transmissions");

			$bitdata="11111111111010111110001010000101000100000100000110000000100000001000010000001110100100011001111111111111111111111110101111100010100001010001000001000";
			($rcode,$hexresult)=SIGNALduino_OSV2($target,$bitdata,$id,length $bitdata);
			is($rcode,-1,"check result first preamble to short second message to short");
			isnt($hexresult,"50FA281441302020042E31","check result first preamble to short second message to short");
			TODO: {
				local $TODO = "codechange needed to detect second message";
				$bitdata="11111111111111010111110001010000101000100011001111111111111111111111110101111100010100001010001000001000001100000001000000010000100000011101001000110011";
				($rcode,$hexresult)=SIGNALduino_OSV2($target,$bitdata,$id,length $bitdata);
				is($rcode,1,"check result first transmission to short second message is okay");
				is($hexresult,"50FA281441302020042E31","heck result first transmission to short second message is okay");
			}
		};

} 
)